---
# Source: co-infrastructure/charts/discovery-server/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: eureka-cm
data:
  eureka_service_address: http://eureka-0.eureka:8761/eureka
---
# Source: co-infrastructure/charts/persistent-server/charts/postgres-inventory/templates/persistentVolumeClaim.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: postgres-inventory-claim0
  name: postgres-inventory-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
# Source: co-infrastructure/charts/persistent-server/charts/postgres-order/templates/persistentVolumeClaim.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: postgres-order-claim0
  name: postgres-order-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
# Source: co-infrastructure/charts/discovery-server/charts/zipkin/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: zipkin
  name: zipkin
spec:
  ports:
    - name: "9411"
      port: 9411
      targetPort: 9411
  selector:
    app: zipkin
status:
  loadBalancer: {}
---
# Source: co-infrastructure/charts/discovery-server/templates/service.yaml
# apiVersion: v1
# kind: Service
# metadata:
#   labels:
#     app: discovery-server
#   name: discovery-server
# spec:
#   ports:
#     - name: "8761"
#       port: 8761
#       targetPort: 8761
#   selector:
#     app: discovery-server
# status:
#   loadBalancer: {}

apiVersion: v1
kind: Service
metadata:
  name: eureka
  labels:
    app: eureka
spec:
  clusterIP: None
  ports:
    - port: 8761
      name: eureka
  selector:
    app: eureka
---
# Source: co-infrastructure/charts/discovery-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: eureka-lb
  labels:
    app: eureka
spec:
  selector:
    app: eureka
  type: NodePort
  ports:
    - port: 80
      targetPort: 8761
---
# Source: co-infrastructure/charts/identity-server/templates/service.yaml
# apiVersion: v1
# kind: Service
# metadata:
#   labels:
#     app: keycloak
#   name: keycloak
# spec:
#   ports:
#     - name: "8080"
#       port: 8080
#       targetPort: 8080
#   selector:
#     app: keycloak
# status:
#   loadBalancer: {}

# apiVersion: v1
# kind: Service
# metadata:
#   name: keycloak
#   labels:
#     app: keycloak
# spec:
#   ports:
#   - name: http
#     port: 8080
#     targetPort: 8080
#   selector:
#     app: keycloak
#   type: LoadBalancer

apiVersion: v1
kind: Service
metadata:
  name: keycloak
spec:
  selector:
    app: keycloak
  ports:
    - name: http
      port: 8080
      targetPort: 8080
  type: ClusterIP
---
# Source: co-infrastructure/charts/message-broker/charts/zookeeper/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  labels:
    app: zookeeper
spec:
  selector:
    app: zookeeper
  ports:
    - port: 2181
      targetPort: 2181
status:
  loadBalancer: {}
---
# Source: co-infrastructure/charts/message-broker/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: F:\tools\kompose.exe convert
    kompose.version: 1.26.1 (a9d05d509)
  creationTimestamp: null
  labels:
    app: broker
  name: broker
spec:
  ports:
    - name: "9092"
      port: 9092
      targetPort: 9092
  selector:
    app: broker
status:
  loadBalancer: {}
---
# Source: co-infrastructure/charts/persistent-server/charts/postgres-inventory/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: postgres-inventory
  name: postgres-inventory
spec:
  ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
  selector:
    app:  postgres-inventory
status:
  loadBalancer: {}
---
# Source: co-infrastructure/charts/persistent-server/charts/postgres-order/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: postgres-order
  name: postgres-order
spec:
  ports:
    - name: "5431"
      port: 5431
      targetPort: 5431
  selector:
    app: postgres-order
status:
  loadBalancer: {}
---
# Source: co-infrastructure/charts/discovery-server/charts/zipkin/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: zipkin
  name: zipkin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zipkin
  strategy: {}
  template:
    metadata:

      labels:
        app: zipkin
    spec:
      containers:
        - image: openzipkin/zipkin
          name: zipkin
          ports:
            - containerPort: 9411
          resources: {}
      restartPolicy: Always
status: {}
---
# Source: co-infrastructure/charts/identity-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: keycloak
  name: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  strategy:
    type: Recreate
  template:
    metadata:

      labels:
        app: keycloak
    spec:
      containers:
        - args:
            - start-dev
          env:
            - name: DB_ADDR
              value: mysql
            - name: DB_DATABASE
              value: keycloak
            - name: DB_PASSWORD
              value: password
            - name: DB_USER
              value: keycloak
            - name: DB_VENDOR
              value: MYSQL
            - name: KEYCLOAK_ADMIN
              value: admin
            - name: KEYCLOAK_ADMIN_PASSWORD
              value: admin
            - name: KC_PROXY
              value: "edge"
            - name: KEYCLOAK_HOSTNAME
              value: keycloak.demo.com
          image: "quay.io/keycloak/keycloak:18.0.0"
          name: keycloak
          ports:
            - containerPort: 8080
          resources: {}
      restartPolicy: Always
status: {}
---
# Source: co-infrastructure/charts/message-broker/charts/zookeeper/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  labels:
    app: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - env:
            - name: ZOOKEEPER_CLIENT_PORT
              value: "2181"
            - name: ZOOKEEPER_TICK_TIME
              value: "2000"
          image: "confluentinc/cp-zookeeper:7.0.1"
          name: zookeeper
---
# Source: co-infrastructure/charts/message-broker/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: broker
  name: broker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: broker
  strategy: {}
  template:
    metadata:

      labels:
        app: broker
    spec:
      containers:
        - env:
            - name: KAFKA_ADVERTISED_LISTENERS
              value: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: zookeeper:2181
          image: "confluentinc/cp-kafka:7.0.1"
          name: broker
          ports:
            - containerPort: 9092
          resources: {}
      restartPolicy: Always
status: {}
---
# Source: co-infrastructure/charts/persistent-server/charts/keycloak-mysql/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: keycloak-mysql
  name: keycloak-mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak-mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: keycloak-mysql
    spec:
      containers:
        - env:
            - name: MYSQL_DATABASE
              value: keycloak
            - name: MYSQL_PASSWORD
              value: password
            - name: MYSQL_ROOT_PASSWORD
              value: root
            - name: MYSQL_USER
              value: keycloak
          image: "mysql:5.7"
          name: keycloak-mysql
          resources: {}
      restartPolicy: Always
status: {}
---
# Source: co-infrastructure/charts/persistent-server/charts/postgres-inventory/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: postgres-inventory
  name: postgres-inventory
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-inventory
  template:
    metadata:
      labels:
        app: postgres-inventory
    spec:
      containers:
        - env:
            - name: PGDATA
              value: /data/postgres
            - name: POSTGRES_DB
              value: inventory-service
            - name: POSTGRES_PASSWORD
              value: password
            - name: POSTGRES_USER
              value: gayankod
          image: postgres
          name: postgres-inventory
          ports:
            - containerPort: 5432
          resources: {}
          volumeMounts:
            - mountPath: /data/postgres
              name: postgres-inventory-claim0
      restartPolicy: Always
      volumes:
        - name: postgres-inventory-claim0
          persistentVolumeClaim:
            claimName: postgres-inventory-claim0
---
# Source: co-infrastructure/charts/persistent-server/charts/postgres-order/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: postgres-order
  name: postgres-order
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-order
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: postgres-order
    spec:
      containers:
        - args:
            - -p
            - "5431"
          env:
            - name: PGDATA
              value: /data/postgres
            - name: POSTGRES_DB
              value: order-service
            - name: POSTGRES_PASSWORD
              value: password
            - name: POSTGRES_USER
              value: gayankod
          image: postgres
          name: postgres-order
          ports:
            - containerPort: 5431
          resources: {}
          volumeMounts:
            - mountPath: /data/postgres
              name: postgres-order-claim0
      restartPolicy: Always
      volumes:
        - name: postgres-order-claim0
          persistentVolumeClaim:
            claimName: postgres-order-claim0
status: {}
---
# Source: co-infrastructure/charts/discovery-server/templates/statefulset.yaml
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   labels:
#     app: discovery-server
#   name: discovery-server
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: discovery-server
#   strategy: {}
#   template:
#     metadata:

#       labels:
#         app: discovery-server
#     spec:
#       containers:
#         - env:
#             - name: SPRING_PROFILES_ACTIVE
#               value: docker
#           image: "gayankod/discovery-server:latest"
#           name: discovery-server
#           ports:
#             - containerPort: 8761
#           resources: {}
#       restartPolicy: Always
# status: {}


apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: eureka
spec:
  serviceName: "eureka"
  replicas: 1
  selector:
    matchLabels:
      app: eureka
  template:
    metadata:
      labels:
        app: eureka
    spec:
      containers:
        - name: eureka
          image: "gayankod/discovery-server:latest"
          imagePullPolicy: Always
          ports:
            - containerPort: 8761
          env:
            - name: EUREKA_SERVER_ADDRESS
              valueFrom:
                configMapKeyRef:
                  name: eureka-cm
                  key: eureka_service_address
---
# Source: co-infrastructure/charts/identity-server/templates/ingress.yaml
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: auth-ingress
# spec:
#   rules:
#     - host: keycloak.demo.com
#       http:
#         paths:
#           - pathType: Prefix
#             path: "/"
#             backend:
#               service:
#                 name: keycloak
#                 port:
#                   number: 8080

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: auth-ingress
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web
    kubernetes.io/ingress.class: traefik
spec:
  rules:
  - host: keycloak.demo.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: keycloak
            port:
              number: 8080
